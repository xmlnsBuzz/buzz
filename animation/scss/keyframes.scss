<<<<<<< HEAD
=======
$anim-name: kst;
>>>>>>> c2d757c10925db8d3cdf4f97c005f42c143afdc2
body {
    background: #333;
}

.box {
    background: white;
    width: 200px;
    height: 200px;
    position: relative;
<<<<<<< HEAD
    animation-name: myanimation;
    animation-duration: 4s;
=======
    animation-name: $anim-name;
    animation-duration: 5s;
>>>>>>> c2d757c10925db8d3cdf4f97c005f42c143afdc2
    
    /** animation-iteration-count
     * 
     * animation의 반복회수를 지정한다.
     * SYNTAX
     * animation-iteration-count: 
     * number|infinite|initial|inherit;
     * 
     * VALUE
     * number : A number that defines how many times an animation should be played. Default value is 1
     * infinite : Specifies that the animation should be played infinite times (for ever)
     * initial : Sets this property to its default value.
     * inherit : Inherits this property from its parent element.     */
    
<<<<<<< HEAD
    animation-iteration-count: 1;
=======
    animation-iteration-count: infinite ;
>>>>>>> c2d757c10925db8d3cdf4f97c005f42c143afdc2
    
    /** animation-direction
     * 
     * animation의 방향(시작지점과 종료지점)을 지정한다.
     * 
     * SYNTAX
     * animation-direction: 
     * normal|reverse|alternate|alternate-reverse|initial|inherit;
     * 
     * VALUE
     * normal : Default value. The animation is played as normal (forwards)
     * reverse : The animation is played in reverse direction (backwards)
     * alternate : The animation is played forwards first, then backwards
     * alternate-reverse : The animation is played backwards first, then forwards
     * initial : Sets this property to its default value.
     * inherit : Inherits this property from its parent element.
     */
<<<<<<< HEAD
    // animation-direction: normal;
=======
    animation-direction: normal;
>>>>>>> c2d757c10925db8d3cdf4f97c005f42c143afdc2

    /** animation-timing-function
     * 
     * animation의 강약이나 완급을 지정한다.
     * SYNTAX : 
     * animation-timing-function: linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start|end)|cubic-bezier(n,n,n,n)|initial|inherit;
     * 
     */

<<<<<<< HEAD
    // animation-timing-function: initial;
=======
    animation-timing-function: ease-in-out;
>>>>>>> c2d757c10925db8d3cdf4f97c005f42c143afdc2

    /**
     * animation-fill-mode
     * 
     * animation의 
     */
    animation-fill-mode: initial;

}

<<<<<<< HEAD
/*@keyframes myanimation {
    0% {
        background: white;
        left: 0px;
        top: 0px;
        border-radius: 0 0 0 0;
    }
    
    25% {
        background: red;
        left: 300px;
        top: 0px;
        border-radius: 50% 0 0 0 ;
    }
    
    50% {
        background: green;
        left: 300px;
        top: 300px;
        border-radius:  50% 50% 0 0;
    }
    
    75% {
        background: blue;
        left: 0px;
        top: 300px;
        border-radius: 50% 50% 50% 0;
    }
    
    100% {
        background: white;
        left: 0px;
        top: 0px;
        border-radius: 50% 50% 50%  50%;
    }*/

    @keyframes myanimation {
=======
@keyframes $anim-name {
>>>>>>> c2d757c10925db8d3cdf4f97c005f42c143afdc2
    0% {
        background: white;
        left: 0px;
        top: 0px;
        border-radius: 0 0 0 0;
    }
    
    25% {
        background: red;
        left: 300px;
        top: 0px;
        border-radius: 50% 0 0 0 ;
    }
    
    50% {
        background: green;
        left: 300px;
        top: 300px;
        border-radius:  50% 50% 0 0;
    }
    
    75% {
        background: blue;
        left: 0px;
        top: 300px;
        border-radius: 50% 50% 50% 0;
    }
    
    100% {
        background: white;
        left: 0px;
        top: 0px;
        border-radius: 50% 50% 50%  50%;
    }
}